"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("./constants");
var RegExps;
(function (RegExps) {
    const g = 1 << 0;
    const i = 1 << 1;
    const m = 1 << 2;
    const y = 1 << 3;
    const u = 1 << 4;
    const s = 1 << 5;
    function flagsAsInteger(regExp) {
        return (regExp.global ? g : 0)
            | (regExp.ignoreCase ? i : 0)
            | (regExp.multiline ? m : 0)
            | (regExp.sticky ? y : 0)
            | (regExp.unicode ? u : 0)
            | (regExp.dotAll ? s : 0);
    }
    RegExps.flagsAsInteger = flagsAsInteger;
    function flagsFromInteger(integer) {
        let ret = '';
        if (integer & g)
            ret += 'g';
        if (integer & i)
            ret += 'i';
        if (integer & m)
            ret += 'm';
        if (integer & y)
            ret += 'y';
        if (integer & u)
            ret += 'u';
        if (integer & s)
            ret += 's';
        return ret;
    }
    RegExps.flagsFromInteger = flagsFromInteger;
})(RegExps = exports.RegExps || (exports.RegExps = {}));
var BigIntegers;
(function (BigIntegers) {
    BigIntegers.SUPPORTED = typeof BigInt === 'function';
    /* istanbul ignore next: This is environment-specific, unused when unsupported */
    BigIntegers.ZERO = BigIntegers.SUPPORTED ? BigInt(0) : null;
    /* istanbul ignore next: This is environment-specific, unused when unsupported */
    BigIntegers.ONE = BigIntegers.SUPPORTED ? BigInt(1) : null;
    /* istanbul ignore next: This is environment-specific, unused when unsupported */
    BigIntegers.EIGHT = BigIntegers.SUPPORTED ? BigInt(8) : null;
    /* istanbul ignore next: This is environment-specific, unused when unsupported */
    BigIntegers.BYTE = BigIntegers.SUPPORTED ? BigInt(0xFF) : null;
})(BigIntegers = exports.BigIntegers || (exports.BigIntegers = {}));
var Numbers;
(function (Numbers) {
    function nextPowerOfTwo(n) {
        return Math.pow(2, Math.ceil(Math.log2(n)));
    }
    Numbers.nextPowerOfTwo = nextPowerOfTwo;
})(Numbers = exports.Numbers || (exports.Numbers = {}));
var TypedArrays;
(function (TypedArrays) {
    TypedArrays.constructors = [Int8Array, Uint8Array, Uint8ClampedArray,
        Int16Array, Uint16Array, Int32Array, Uint32Array,
        Float32Array, Float64Array, DataView];
    /* istanbul ignore next: This is environment-specific, unused when unsupported */
    if (typeof BigInt64Array === 'function')
        TypedArrays.constructors.push(BigInt64Array);
    /* istanbul ignore next: This is environment-specific, unused when unsupported */
    if (typeof BigUint64Array === 'function')
        TypedArrays.constructors.push(BigUint64Array);
    TypedArrays.typedArrayTags = new Map(TypedArrays.constructors.map(typedArray => 
    // @ts-ignore
    [Object.prototype.toString.call(new typedArray(new ArrayBuffer(0))), constants_1.BinaryTokens[typedArray.name]]));
    TypedArrays.typedArrayTagToConstructor = new Map(TypedArrays.constructors.map(typedArray => 
    // @ts-ignore
    [constants_1.BinaryTokens[typedArray.name], typedArray]));
})(TypedArrays = exports.TypedArrays || (exports.TypedArrays = {}));
//# sourceMappingURL=util.js.map